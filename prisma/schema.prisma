generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) 
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) 
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
  id             String           @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  role           UserRole         @default(USER)
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  accounts       Account[]
  sessions       Session[]
  aiTools        AiTool[]
  review         Review[]
  reviewLike     ReviewLike[]
  payment        Payment[]
  News           News[]
  ReviewUnlike   ReviewUnlike[]
  AiTollBookmark AiToolBookmark[]
  NewsBookmark   NewsBookmark[]
}

model VerificationToken {
  identifier String   @id 
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AiTool {
  id                  String           @id @default(cuid())
  title               String 
  toolDescription     String
  shortDescription    String
  useCase1            String
  useCase2            String
  useCase3            String
  price               Int
  pricePlan           PriceFormat
  pricing             PricingFormat
  toolURL             String           @unique
  toolFeature         String
  views               Int              @default(0)
  aiToolBookmarkCount Int              @default(0)
  toolTags            String[]
  toolScreenshot      String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  user                User             @relation(fields: [userId], references: [id])
  userId              String
  category            String
  subcategories       String
  reviews             Review[]
  AiTollBookmark      AiToolBookmark[]
}

model AiToolBookmark {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  toolId    String
  tool      AiTool   @relation(fields: [toolId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model NewsBookmark {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  newsId     String
  news       News     @relation(fields: [newsId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id            String   @id @default(cuid())
  name          String   @unique
  subcategories String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id           String         @id @default(cuid())
  content      String
  rating       Int            @default(0)
  status       ReviewStatus   @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  toolId       String
  tool         AiTool         @relation(fields: [toolId], references: [id])
  likeCount    Int            @default(0)
  unlikeCount  Int            @default(0)
  reviewLikes  ReviewLike[]
  ReviewUnlike ReviewUnlike[]

  @@unique([userId])
}

model ReviewLike {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])
  createdAt DateTime @default(now())
}

model ReviewUnlike {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  reviewId  String
  review    Review   @relation(fields: [reviewId], references: [id])
  createdAt DateTime @default(now())
}

model Payment {
  id        String        @id @default(cuid())
  userId    String
  paymentId String        @unique
  amount    Int
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])
}

model News {
  id                String         @id @default(cuid())
  title             String
  url               String
  views             Int            @default(0)
  newsBookmarkCount Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  NewsBookmark      NewsBookmark[]
}

enum PaymentStatus {
  SUCCESS
  FAILED
  PENDING
}

enum ReviewStatus {
  PENDING
  APPROVE
}

enum UserRole {
  USER
  ADMIN
}

enum PricingFormat {
  Premium
  Free
  Paid
  Free_Trial
  Contact_For_Pricing
}

enum PriceFormat {
  DOLLARS_PER_MONTH
  DOLLARS_PER_WEEK
  DOLLARS_PER_MINUTE
}
